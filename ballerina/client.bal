// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;
import ballerina/mime;

# This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://app.asana.com/api/1.0") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Get an attachment
    #
    # + attachment_gid - Globally unique identifier for the attachment
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the record for a single attachment 
    resource isolated function get attachments/[string attachment_gid](map<string|string[]> headers = {}, *GetAttachmentQueries queries) returns InlineResponse200|error {
        string resourcePath = string `/attachments/${getEncodedUri(attachment_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete an attachment
    #
    # + attachment_gid - Globally unique identifier for the attachment
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully deleted the specified attachment 
    resource isolated function delete attachments/[string attachment_gid](map<string|string[]> headers = {}, *DeleteAttachmentQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/attachments/${getEncodedUri(attachment_gid)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get attachments from an object
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the specified object's attachments 
    resource isolated function get attachments(map<string|string[]> headers = {}, *GetAttachmentsForObjectQueries queries) returns InlineResponse2002|error {
        string resourcePath = string `/attachments`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Upload an attachment
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The file you want to upload 
    # + return - Successfully uploaded the attachment to the parent object 
    resource isolated function post attachments(AttachmentRequest payload, map<string|string[]> headers = {}, *CreateAttachmentForObjectQueries queries) returns InlineResponse200|error {
        string resourcePath = string `/attachments`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        mime:Entity[] bodyParts = check createBodyParts(payload);
        request.setBodyParts(bodyParts);
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get audit log events
    #
    # + workspace_gid - Globally unique identifier for the workspace or organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - AuditLogEvents were successfully retrieved 
    resource isolated function get workspaces/[string workspace_gid]/audit_log_events(map<string|string[]> headers = {}, *GetAuditLogEventsQueries queries) returns InlineResponse2003|error {
        string resourcePath = string `/workspaces/${getEncodedUri(workspace_gid)}/audit_log_events`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Submit parallel requests
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The requests to batch together via the Batch API 
    # + return - Successfully completed the requested batch API operations 
    resource isolated function post batch(BatchBody payload, map<string|string[]> headers = {}, *CreateBatchRequestQueries queries) returns InlineResponse2004|error {
        string resourcePath = string `/batch`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a project's custom fields
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved custom field settings objects for a project 
    resource isolated function get projects/[string project_gid]/custom_field_settings(map<string|string[]> headers = {}, *GetCustomFieldSettingsForProjectQueries queries) returns InlineResponse2005|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}/custom_field_settings`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a portfolio's custom fields
    #
    # + portfolio_gid - Globally unique identifier for the portfolio
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved custom field settings objects for a portfolio 
    resource isolated function get portfolios/[string portfolio_gid]/custom_field_settings(map<string|string[]> headers = {}, *GetCustomFieldSettingsForPortfolioQueries queries) returns InlineResponse2005|error {
        string resourcePath = string `/portfolios/${getEncodedUri(portfolio_gid)}/custom_field_settings`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a custom field
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The custom field object to create 
    # + return - Custom field successfully created 
    resource isolated function post custom_fields(CustomFieldsBody payload, map<string|string[]> headers = {}, *CreateCustomFieldQueries queries) returns InlineResponse201|error {
        string resourcePath = string `/custom_fields`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a custom field
    #
    # + custom_field_gid - Globally unique identifier for the custom field
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the complete definition of a custom fieldâ€™s metadata 
    resource isolated function get custom_fields/[string custom_field_gid](map<string|string[]> headers = {}, *GetCustomFieldQueries queries) returns InlineResponse201|error {
        string resourcePath = string `/custom_fields/${getEncodedUri(custom_field_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update a custom field
    #
    # + custom_field_gid - Globally unique identifier for the custom field
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The custom field object with all updated properties 
    # + return - The custom field was successfully updated 
    resource isolated function put custom_fields/[string custom_field_gid](CustomFieldscustomFieldGidBody payload, map<string|string[]> headers = {}, *UpdateCustomFieldQueries queries) returns InlineResponse201|error {
        string resourcePath = string `/custom_fields/${getEncodedUri(custom_field_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete a custom field
    #
    # + custom_field_gid - Globally unique identifier for the custom field
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - The custom field was successfully deleted 
    resource isolated function delete custom_fields/[string custom_field_gid](map<string|string[]> headers = {}, *DeleteCustomFieldQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/custom_fields/${getEncodedUri(custom_field_gid)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get a workspace's custom fields
    #
    # + workspace_gid - Globally unique identifier for the workspace or organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved all custom fields for the given workspace 
    resource isolated function get workspaces/[string workspace_gid]/custom_fields(map<string|string[]> headers = {}, *GetCustomFieldsForWorkspaceQueries queries) returns InlineResponse2006|error {
        string resourcePath = string `/workspaces/${getEncodedUri(workspace_gid)}/custom_fields`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create an enum option
    #
    # + custom_field_gid - Globally unique identifier for the custom field
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The enum option object to create 
    # + return - Custom field enum option successfully created 
    resource isolated function post custom_fields/[string custom_field_gid]/enum_options(CustomFieldGidEnumOptionsBody payload, map<string|string[]> headers = {}, *CreateEnumOptionForCustomFieldQueries queries) returns InlineResponse2011|error {
        string resourcePath = string `/custom_fields/${getEncodedUri(custom_field_gid)}/enum_options`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Reorder a custom field's enum
    #
    # + custom_field_gid - Globally unique identifier for the custom field
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The enum option object to create 
    # + return - Custom field enum option successfully reordered 
    resource isolated function post custom_fields/[string custom_field_gid]/enum_options/insert(EnumOptionsInsertBody payload, map<string|string[]> headers = {}, *InsertEnumOptionForCustomFieldQueries queries) returns InlineResponse2011|error {
        string resourcePath = string `/custom_fields/${getEncodedUri(custom_field_gid)}/enum_options/insert`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Update an enum option
    #
    # + enum_option_gid - Globally unique identifier for the enum option
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The enum option object to update 
    # + return - Successfully updated the specified custom field enum 
    resource isolated function put enum_options/[string enum_option_gid](EnumOptionsenumOptionGidBody payload, map<string|string[]> headers = {}, *UpdateEnumOptionQueries queries) returns InlineResponse2011|error {
        string resourcePath = string `/enum_options/${getEncodedUri(enum_option_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get events on a resource
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved events 
    resource isolated function get events(map<string|string[]> headers = {}, *GetEventsQueries queries) returns InlineResponse2007|error {
        string resourcePath = string `/events`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a goal relationship
    #
    # + goal_relationship_gid - Globally unique identifier for the goal relationship
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the record for the goal relationship 
    resource isolated function get goal_relationships/[string goal_relationship_gid](map<string|string[]> headers = {}, *GetGoalRelationshipQueries queries) returns InlineResponse2008|error {
        string resourcePath = string `/goal_relationships/${getEncodedUri(goal_relationship_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update a goal relationship
    #
    # + goal_relationship_gid - Globally unique identifier for the goal relationship
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The updated fields for the goal relationship 
    # + return - Successfully updated the goal relationship 
    resource isolated function put goal_relationships/[string goal_relationship_gid](GoalRelationshipsgoalRelationshipGidBody payload, map<string|string[]> headers = {}, *UpdateGoalRelationshipQueries queries) returns InlineResponse2008|error {
        string resourcePath = string `/goal_relationships/${getEncodedUri(goal_relationship_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get goal relationships
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested goal relationships 
    resource isolated function get goal_relationships(map<string|string[]> headers = {}, *GetGoalRelationshipsQueries queries) returns InlineResponse2009|error {
        string resourcePath = string `/goal_relationships`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add a supporting goal relationship
    #
    # + goal_gid - Globally unique identifier for the goal
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The supporting resource to be added to the goal 
    # + return - Successfully created the goal relationship 
    resource isolated function post goals/[string goal_gid]/addSupportingRelationship(GoalGidAddSupportingRelationshipBody payload, map<string|string[]> headers = {}, *AddSupportingRelationshipQueries queries) returns InlineResponse2008|error {
        string resourcePath = string `/goals/${getEncodedUri(goal_gid)}/addSupportingRelationship`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Removes a supporting goal relationship
    #
    # + goal_gid - Globally unique identifier for the goal
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The supporting resource to be removed from the goal 
    # + return - Successfully removed the goal relationship 
    resource isolated function post goals/[string goal_gid]/removeSupportingRelationship(GoalGidRemoveSupportingRelationshipBody payload, map<string|string[]> headers = {}, *RemoveSupportingRelationshipQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/goals/${getEncodedUri(goal_gid)}/removeSupportingRelationship`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a goal
    #
    # + goal_gid - Globally unique identifier for the goal
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the record for a single goal 
    resource isolated function get goals/[string goal_gid](map<string|string[]> headers = {}, *GetGoalQueries queries) returns InlineResponse20010|error {
        string resourcePath = string `/goals/${getEncodedUri(goal_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update a goal
    #
    # + goal_gid - Globally unique identifier for the goal
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The updated fields for the goal 
    # + return - Successfully updated the goal 
    resource isolated function put goals/[string goal_gid](GoalsgoalGidBody payload, map<string|string[]> headers = {}, *UpdateGoalQueries queries) returns InlineResponse20010|error {
        string resourcePath = string `/goals/${getEncodedUri(goal_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete a goal
    #
    # + goal_gid - Globally unique identifier for the goal
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully deleted the specified goal 
    resource isolated function delete goals/[string goal_gid](map<string|string[]> headers = {}, *DeleteGoalQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/goals/${getEncodedUri(goal_gid)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get goals
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested goals 
    resource isolated function get goals(map<string|string[]> headers = {}, *GetGoalsQueries queries) returns InlineResponse20011|error {
        string resourcePath = string `/goals`;
        map<Encoding> queryParamEncoding = {"time_periods": {style: FORM, explode: true}, "opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a goal
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The goal to create 
    # + return - Successfully created a new goal 
    resource isolated function post goals(GoalsBody payload, map<string|string[]> headers = {}, *CreateGoalQueries queries) returns InlineResponse20010|error {
        string resourcePath = string `/goals`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a goal metric
    #
    # + goal_gid - Globally unique identifier for the goal
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The goal metric to create 
    # + return - Successfully created a new goal metric 
    resource isolated function post goals/[string goal_gid]/setMetric(GoalGidSetMetricBody payload, map<string|string[]> headers = {}, *CreateGoalMetricQueries queries) returns InlineResponse20010|error {
        string resourcePath = string `/goals/${getEncodedUri(goal_gid)}/setMetric`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Update a goal metric
    #
    # + goal_gid - Globally unique identifier for the goal
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The updated fields for the goal metric 
    # + return - Successfully updated the goal metric 
    resource isolated function post goals/[string goal_gid]/setMetricCurrentValue(GoalGidSetMetricCurrentValueBody payload, map<string|string[]> headers = {}, *UpdateGoalMetricQueries queries) returns InlineResponse20010|error {
        string resourcePath = string `/goals/${getEncodedUri(goal_gid)}/setMetricCurrentValue`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add a collaborator to a goal
    #
    # + goal_gid - Globally unique identifier for the goal
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The followers to be added as collaborators 
    # + return - Successfully added users as collaborators 
    resource isolated function post goals/[string goal_gid]/addFollowers(GoalGidAddFollowersBody payload, map<string|string[]> headers = {}, *AddFollowersQueries queries) returns InlineResponse20010|error {
        string resourcePath = string `/goals/${getEncodedUri(goal_gid)}/addFollowers`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove a collaborator from a goal
    #
    # + goal_gid - Globally unique identifier for the goal
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The followers to be removed as collaborators 
    # + return - Successfully removed users as collaborators 
    resource isolated function post goals/[string goal_gid]/removeFollowers(GoalGidRemoveFollowersBody payload, map<string|string[]> headers = {}, *RemoveFollowersQueries queries) returns InlineResponse20010|error {
        string resourcePath = string `/goals/${getEncodedUri(goal_gid)}/removeFollowers`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get parent goals from a goal
    #
    # + goal_gid - Globally unique identifier for the goal
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the specified goal's parent goals 
    resource isolated function get goals/[string goal_gid]/parentGoals(map<string|string[]> headers = {}, *GetParentGoalsForGoalQueries queries) returns InlineResponse20012|error {
        string resourcePath = string `/goals/${getEncodedUri(goal_gid)}/parentGoals`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a job by id
    #
    # + job_gid - Globally unique identifier for the job
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved Job 
    resource isolated function get jobs/[string job_gid](map<string|string[]> headers = {}, *GetJobQueries queries) returns InlineResponse20013|error {
        string resourcePath = string `/jobs/${getEncodedUri(job_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get multiple memberships
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested membership 
    resource isolated function get memberships(map<string|string[]> headers = {}, *GetMembershipsQueries queries) returns InlineResponse20014|error {
        string resourcePath = string `/memberships`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a membership
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The updated fields for the membership 
    # + return - Successfully created the requested membership 
    resource isolated function post memberships(MembershipsBody payload, map<string|string[]> headers = {}, *CreateMembershipQueries queries) returns InlineResponse2012|error {
        string resourcePath = string `/memberships`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a membership
    #
    # + membership_gid - Globally unique identifier for the membership
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the record for a single membership 
    resource isolated function get memberships/[string membership_gid](map<string|string[]> headers = {}, *GetMembershipQueries queries) returns InlineResponse20015|error {
        string resourcePath = string `/memberships/${getEncodedUri(membership_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update a membership
    #
    # + membership_gid - Globally unique identifier for the membership
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The membership to update 
    # + return - Successfully updated the requested membership 
    resource isolated function put memberships/[string membership_gid](MembershipsmembershipGidBody payload, map<string|string[]> headers = {}, *UpdateMembershipQueries queries) returns InlineResponse2012|error {
        string resourcePath = string `/memberships/${getEncodedUri(membership_gid)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete a membership
    #
    # + membership_gid - Globally unique identifier for the membership
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully deleted the requested membership 
    resource isolated function delete memberships/[string membership_gid](map<string|string[]> headers = {}, *DeleteMembershipQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/memberships/${getEncodedUri(membership_gid)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Create an organization export request
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The organization to export 
    # + return - Successfully created organization export request 
    resource isolated function post organization_exports(OrganizationExportsBody payload, map<string|string[]> headers = {}, *CreateOrganizationExportQueries queries) returns InlineResponse2013|error {
        string resourcePath = string `/organization_exports`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get details on an org export request
    #
    # + organization_export_gid - Globally unique identifier for the organization export
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved organization export object 
    resource isolated function get organization_exports/[string organization_export_gid](map<string|string[]> headers = {}, *GetOrganizationExportQueries queries) returns InlineResponse2013|error {
        string resourcePath = string `/organization_exports/${getEncodedUri(organization_export_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get multiple portfolio memberships
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved portfolio memberships 
    resource isolated function get portfolio_memberships(map<string|string[]> headers = {}, *GetPortfolioMembershipsQueries queries) returns InlineResponse20016|error {
        string resourcePath = string `/portfolio_memberships`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a portfolio membership
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested portfolio membership 
    resource isolated function get portfolio_memberships/[string portfolio_membership_gid](map<string|string[]> headers = {}, *GetPortfolioMembershipQueries queries) returns InlineResponse20017|error {
        string resourcePath = string `/portfolio_memberships/${getEncodedUri(portfolio_membership_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get memberships from a portfolio
    #
    # + portfolio_gid - Globally unique identifier for the portfolio
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested portfolio's memberships 
    resource isolated function get portfolios/[string portfolio_gid]/portfolio_memberships(map<string|string[]> headers = {}, *GetPortfolioMembershipsForPortfolioQueries queries) returns InlineResponse20016|error {
        string resourcePath = string `/portfolios/${getEncodedUri(portfolio_gid)}/portfolio_memberships`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get multiple portfolios
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved portfolios 
    resource isolated function get portfolios(map<string|string[]> headers = {}, *GetPortfoliosQueries queries) returns InlineResponse20018|error {
        string resourcePath = string `/portfolios`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a portfolio
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The portfolio to create 
    # + return - Successfully created portfolio 
    resource isolated function post portfolios(PortfoliosBody payload, map<string|string[]> headers = {}, *CreatePortfolioQueries queries) returns InlineResponse2014|error {
        string resourcePath = string `/portfolios`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a portfolio
    #
    # + portfolio_gid - Globally unique identifier for the portfolio
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested portfolio 
    resource isolated function get portfolios/[string portfolio_gid](map<string|string[]> headers = {}, *GetPortfolioQueries queries) returns InlineResponse2014|error {
        string resourcePath = string `/portfolios/${getEncodedUri(portfolio_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update a portfolio
    #
    # + portfolio_gid - Globally unique identifier for the portfolio
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The updated fields for the portfolio 
    # + return - Successfully updated the portfolio 
    resource isolated function put portfolios/[string portfolio_gid](PortfoliosportfolioGidBody payload, map<string|string[]> headers = {}, *UpdatePortfolioQueries queries) returns InlineResponse2014|error {
        string resourcePath = string `/portfolios/${getEncodedUri(portfolio_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete a portfolio
    #
    # + portfolio_gid - Globally unique identifier for the portfolio
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully deleted the specified portfolio 
    resource isolated function delete portfolios/[string portfolio_gid](map<string|string[]> headers = {}, *DeletePortfolioQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/portfolios/${getEncodedUri(portfolio_gid)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get portfolio items
    #
    # + portfolio_gid - Globally unique identifier for the portfolio
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested portfolio's items 
    resource isolated function get portfolios/[string portfolio_gid]/items(map<string|string[]> headers = {}, *GetItemsForPortfolioQueries queries) returns InlineResponse20019|error {
        string resourcePath = string `/portfolios/${getEncodedUri(portfolio_gid)}/items`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add a portfolio item
    #
    # + portfolio_gid - Globally unique identifier for the portfolio
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Information about the item being inserted 
    # + return - Successfully added the item to the portfolio 
    resource isolated function post portfolios/[string portfolio_gid]/addItem(PortfolioGidAddItemBody payload, map<string|string[]> headers = {}, *AddItemForPortfolioQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/portfolios/${getEncodedUri(portfolio_gid)}/addItem`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove a portfolio item
    #
    # + portfolio_gid - Globally unique identifier for the portfolio
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Information about the item being removed 
    # + return - Successfully removed the item from the portfolio 
    resource isolated function post portfolios/[string portfolio_gid]/removeItem(PortfolioGidRemoveItemBody payload, map<string|string[]> headers = {}, *RemoveItemForPortfolioQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/portfolios/${getEncodedUri(portfolio_gid)}/removeItem`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add a custom field to a portfolio
    #
    # + portfolio_gid - Globally unique identifier for the portfolio
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Information about the custom field setting 
    # + return - Successfully added the custom field to the portfolio 
    resource isolated function post portfolios/[string portfolio_gid]/addCustomFieldSetting(PortfolioGidAddCustomFieldSettingBody payload, map<string|string[]> headers = {}, *AddCustomFieldSettingForPortfolioQueries queries) returns InlineResponse20020|error {
        string resourcePath = string `/portfolios/${getEncodedUri(portfolio_gid)}/addCustomFieldSetting`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove a custom field from a portfolio
    #
    # + portfolio_gid - Globally unique identifier for the portfolio
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Information about the custom field setting being removed 
    # + return - Successfully removed the custom field from the portfolio 
    resource isolated function post portfolios/[string portfolio_gid]/removeCustomFieldSetting(PortfolioGidRemoveCustomFieldSettingBody payload, map<string|string[]> headers = {}, *RemoveCustomFieldSettingForPortfolioQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/portfolios/${getEncodedUri(portfolio_gid)}/removeCustomFieldSetting`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add users to a portfolio
    #
    # + portfolio_gid - Globally unique identifier for the portfolio
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Information about the members being added 
    # + return - Successfully added members to the portfolio 
    resource isolated function post portfolios/[string portfolio_gid]/addMembers(PortfolioGidAddMembersBody payload, map<string|string[]> headers = {}, *AddMembersForPortfolioQueries queries) returns InlineResponse2014|error {
        string resourcePath = string `/portfolios/${getEncodedUri(portfolio_gid)}/addMembers`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove users from a portfolio
    #
    # + portfolio_gid - Globally unique identifier for the portfolio
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Information about the members being removed 
    # + return - Successfully removed the members from the portfolio 
    resource isolated function post portfolios/[string portfolio_gid]/removeMembers(PortfolioGidRemoveMembersBody payload, map<string|string[]> headers = {}, *RemoveMembersForPortfolioQueries queries) returns InlineResponse2014|error {
        string resourcePath = string `/portfolios/${getEncodedUri(portfolio_gid)}/removeMembers`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a project brief
    #
    # + project_brief_gid - Globally unique identifier for the project brief
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the record for a project brief 
    resource isolated function get project_briefs/[string project_brief_gid](map<string|string[]> headers = {}, *GetProjectBriefQueries queries) returns InlineResponse20021|error {
        string resourcePath = string `/project_briefs/${getEncodedUri(project_brief_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update a project brief
    #
    # + project_brief_gid - Globally unique identifier for the project brief
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The updated fields for the project brief 
    # + return - Successfully updated the project brief 
    resource isolated function put project_briefs/[string project_brief_gid](ProjectBriefsprojectBriefGidBody payload, map<string|string[]> headers = {}, *UpdateProjectBriefQueries queries) returns InlineResponse20021|error {
        string resourcePath = string `/project_briefs/${getEncodedUri(project_brief_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete a project brief
    #
    # + project_brief_gid - Globally unique identifier for the project brief
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully deleted the specified project brief 
    resource isolated function delete project_briefs/[string project_brief_gid](map<string|string[]> headers = {}, *DeleteProjectBriefQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/project_briefs/${getEncodedUri(project_brief_gid)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Create a project brief
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The project brief to create 
    # + return - Successfully created a new project brief 
    resource isolated function post projects/[string project_gid]/project_briefs(ProjectGidProjectBriefsBody payload, map<string|string[]> headers = {}, *CreateProjectBriefQueries queries) returns InlineResponse20021|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}/project_briefs`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a project membership
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested project membership 
    resource isolated function get project_memberships/[string project_membership_gid](map<string|string[]> headers = {}, *GetProjectMembershipQueries queries) returns InlineResponse20022|error {
        string resourcePath = string `/project_memberships/${getEncodedUri(project_membership_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get memberships from a project
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested project's memberships 
    resource isolated function get projects/[string project_gid]/project_memberships(map<string|string[]> headers = {}, *GetProjectMembershipsForProjectQueries queries) returns InlineResponse20023|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}/project_memberships`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a project status
    #
    # + project_status_gid - The project status update to get
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the specified project's status updates 
    resource isolated function get project_statuses/[string project_status_gid](map<string|string[]> headers = {}, *GetProjectStatusQueries queries) returns InlineResponse20024|error {
        string resourcePath = string `/project_statuses/${getEncodedUri(project_status_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete a project status
    #
    # + project_status_gid - The project status update to get
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully deleted the specified project status 
    resource isolated function delete project_statuses/[string project_status_gid](map<string|string[]> headers = {}, *DeleteProjectStatusQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/project_statuses/${getEncodedUri(project_status_gid)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get statuses from a project
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the specified project's status updates 
    resource isolated function get projects/[string project_gid]/project_statuses(map<string|string[]> headers = {}, *GetProjectStatusesForProjectQueries queries) returns InlineResponse20025|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}/project_statuses`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a project status
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The project status to create 
    # + return - Successfully created a new story 
    resource isolated function post projects/[string project_gid]/project_statuses(ProjectGidProjectStatusesBody payload, map<string|string[]> headers = {}, *CreateProjectStatusForProjectQueries queries) returns InlineResponse20024|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}/project_statuses`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a project template
    #
    # + project_template_gid - Globally unique identifier for the project template
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested project template 
    resource isolated function get project_templates/[string project_template_gid](map<string|string[]> headers = {}, *GetProjectTemplateQueries queries) returns InlineResponse20026|error {
        string resourcePath = string `/project_templates/${getEncodedUri(project_template_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete a project template
    #
    # + project_template_gid - Globally unique identifier for the project template
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully deleted the specified project template 
    resource isolated function delete project_templates/[string project_template_gid](map<string|string[]> headers = {}, *DeleteProjectTemplateQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/project_templates/${getEncodedUri(project_template_gid)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get multiple project templates
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested team's or workspace's project templates 
    resource isolated function get project_templates(map<string|string[]> headers = {}, *GetProjectTemplatesQueries queries) returns InlineResponse20027|error {
        string resourcePath = string `/project_templates`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a team's project templates
    #
    # + team_gid - Globally unique identifier for the team
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested team's project templates 
    resource isolated function get teams/[string team_gid]/project_templates(map<string|string[]> headers = {}, *GetProjectTemplatesForTeamQueries queries) returns InlineResponse20027|error {
        string resourcePath = string `/teams/${getEncodedUri(team_gid)}/project_templates`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Instantiate a project from a project template
    #
    # + project_template_gid - Globally unique identifier for the project template
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Describes the inputs used for instantiating a project, such as the resulting project's name, which team it should be created in, and values for date variables 
    # + return - Successfully created the job to handle project instantiation 
    resource isolated function post project_templates/[string project_template_gid]/instantiateProject(ProjectTemplateGidInstantiateProjectBody payload, map<string|string[]> headers = {}, *InstantiateProjectQueries queries) returns InlineResponse20013|error {
        string resourcePath = string `/project_templates/${getEncodedUri(project_template_gid)}/instantiateProject`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get multiple projects
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved projects 
    resource isolated function get projects(map<string|string[]> headers = {}, *GetProjectsQueries queries) returns InlineResponse20019|error {
        string resourcePath = string `/projects`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a project
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The project to create 
    # + return - Successfully retrieved projects 
    resource isolated function post projects(ProjectsBody payload, map<string|string[]> headers = {}, *CreateProjectQueries queries) returns InlineResponse2015|error {
        string resourcePath = string `/projects`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a project
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested project 
    resource isolated function get projects/[string project_gid](map<string|string[]> headers = {}, *GetProjectQueries queries) returns InlineResponse2015|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update a project
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The updated fields for the project 
    # + return - Successfully updated the project 
    resource isolated function put projects/[string project_gid](ProjectsprojectGidBody payload, map<string|string[]> headers = {}, *UpdateProjectQueries queries) returns InlineResponse2015|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete a project
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully deleted the specified project 
    resource isolated function delete projects/[string project_gid](map<string|string[]> headers = {}, *DeleteProjectQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Duplicate a project
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Describes the duplicate's name and the elements that will be duplicated 
    # + return - Successfully created the job to handle duplication 
    resource isolated function post projects/[string project_gid]/duplicate(ProjectGidDuplicateBody payload, map<string|string[]> headers = {}, *DuplicateProjectQueries queries) returns InlineResponse20013|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}/duplicate`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get projects a task is in
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the projects for the given task 
    resource isolated function get tasks/[string task_gid]/projects(map<string|string[]> headers = {}, *GetProjectsForTaskQueries queries) returns InlineResponse20019|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/projects`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a team's projects
    #
    # + team_gid - Globally unique identifier for the team
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested team's projects 
    resource isolated function get teams/[string team_gid]/projects(map<string|string[]> headers = {}, *GetProjectsForTeamQueries queries) returns InlineResponse20019|error {
        string resourcePath = string `/teams/${getEncodedUri(team_gid)}/projects`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a project in a team
    #
    # + team_gid - Globally unique identifier for the team
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The new project to create 
    # + return - Successfully created the specified project 
    resource isolated function post teams/[string team_gid]/projects(TeamGidProjectsBody payload, map<string|string[]> headers = {}, *CreateProjectForTeamQueries queries) returns InlineResponse2015|error {
        string resourcePath = string `/teams/${getEncodedUri(team_gid)}/projects`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get all projects in a workspace
    #
    # + workspace_gid - Globally unique identifier for the workspace or organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested workspace's projects 
    resource isolated function get workspaces/[string workspace_gid]/projects(map<string|string[]> headers = {}, *GetProjectsForWorkspaceQueries queries) returns InlineResponse20019|error {
        string resourcePath = string `/workspaces/${getEncodedUri(workspace_gid)}/projects`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a project in a workspace
    #
    # + workspace_gid - Globally unique identifier for the workspace or organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The new project to create 
    # + return - Successfully created a new project in the specified workspace 
    resource isolated function post workspaces/[string workspace_gid]/projects(WorkspaceGidProjectsBody payload, map<string|string[]> headers = {}, *CreateProjectForWorkspaceQueries queries) returns InlineResponse2015|error {
        string resourcePath = string `/workspaces/${getEncodedUri(workspace_gid)}/projects`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add a custom field to a project
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Information about the custom field setting 
    # + return - Successfully added the custom field to the project 
    resource isolated function post projects/[string project_gid]/addCustomFieldSetting(ProjectGidAddCustomFieldSettingBody payload, map<string|string[]> headers = {}, *AddCustomFieldSettingForProjectQueries queries) returns InlineResponse20020|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}/addCustomFieldSetting`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove a custom field from a project
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Information about the custom field setting being removed 
    # + return - Successfully removed the custom field from the project 
    resource isolated function post projects/[string project_gid]/removeCustomFieldSetting(ProjectGidRemoveCustomFieldSettingBody payload, map<string|string[]> headers = {}, *RemoveCustomFieldSettingForProjectQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}/removeCustomFieldSetting`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get task count of a project
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested project's task counts 
    resource isolated function get projects/[string project_gid]/task_counts(map<string|string[]> headers = {}, *GetTaskCountsForProjectQueries queries) returns InlineResponse20028|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}/task_counts`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add users to a project
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Information about the members being added 
    # + return - Successfully added members to the project 
    resource isolated function post projects/[string project_gid]/addMembers(ProjectGidAddMembersBody payload, map<string|string[]> headers = {}, *AddMembersForProjectQueries queries) returns InlineResponse2015|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}/addMembers`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove users from a project
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Information about the members being removed 
    # + return - Successfully removed the members from the project 
    resource isolated function post projects/[string project_gid]/removeMembers(ProjectGidRemoveMembersBody payload, map<string|string[]> headers = {}, *RemoveMembersForProjectQueries queries) returns InlineResponse2015|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}/removeMembers`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add followers to a project
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Information about the followers being added 
    # + return - Successfully added followers to the project 
    resource isolated function post projects/[string project_gid]/addFollowers(ProjectGidAddFollowersBody payload, map<string|string[]> headers = {}, *AddFollowersForProjectQueries queries) returns InlineResponse2015|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}/addFollowers`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove followers from a project
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Information about the followers being removed 
    # + return - Successfully removed followers from the project 
    resource isolated function post projects/[string project_gid]/removeFollowers(ProjectGidRemoveFollowersBody payload, map<string|string[]> headers = {}, *RemoveFollowersForProjectQueries queries) returns InlineResponse2015|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}/removeFollowers`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a project template from a project
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Describes the inputs used for creating a project template, such as the resulting project template's name, which team it should be created in 
    # + return - Successfully created the job to handle project template creation 
    resource isolated function post projects/[string project_gid]/saveAsTemplate(ProjectGidSaveAsTemplateBody payload, map<string|string[]> headers = {}, *ProjectSaveAsTemplateQueries queries) returns InlineResponse20013|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}/saveAsTemplate`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Trigger a rule
    #
    # + rule_trigger_gid - The ID of the incoming web request trigger. This value is a path parameter that is automatically generated for the API endpoint
    # + headers - Headers to be sent with the request 
    # + payload - A dictionary of variables accessible from within the rule 
    # + return - Successfully triggered a rule 
    resource isolated function post rule_triggers/[string rule_trigger_gid]/run(RuleTriggerGidRunBody payload, map<string|string[]> headers = {}) returns InlineResponse20029|error {
        string resourcePath = string `/rule_triggers/${getEncodedUri(rule_trigger_gid)}/run`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a section
    #
    # + section_gid - The globally unique identifier for the section
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved section 
    resource isolated function get sections/[string section_gid](map<string|string[]> headers = {}, *GetSectionQueries queries) returns InlineResponse20030|error {
        string resourcePath = string `/sections/${getEncodedUri(section_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update a section
    #
    # + section_gid - The globally unique identifier for the section
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The section to create 
    # + return - Successfully updated the specified section 
    resource isolated function put sections/[string section_gid](SectionssectionGidBody payload, map<string|string[]> headers = {}, *UpdateSectionQueries queries) returns InlineResponse20030|error {
        string resourcePath = string `/sections/${getEncodedUri(section_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete a section
    #
    # + section_gid - The globally unique identifier for the section
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully deleted the specified section 
    resource isolated function delete sections/[string section_gid](map<string|string[]> headers = {}, *DeleteSectionQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/sections/${getEncodedUri(section_gid)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get sections in a project
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved sections in project 
    resource isolated function get projects/[string project_gid]/sections(map<string|string[]> headers = {}, *GetSectionsForProjectQueries queries) returns InlineResponse20031|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}/sections`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a section in a project
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The section to create 
    # + return - Successfully created the specified section 
    resource isolated function post projects/[string project_gid]/sections(ProjectGidSectionsBody payload, map<string|string[]> headers = {}, *CreateSectionForProjectQueries queries) returns InlineResponse20030|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}/sections`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add task to section
    #
    # + section_gid - The globally unique identifier for the section
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The task and optionally the insert location 
    # + return - Successfully added the task 
    resource isolated function post sections/[string section_gid]/addTask(SectionGidAddTaskBody payload, map<string|string[]> headers = {}, *AddTaskForSectionQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/sections/${getEncodedUri(section_gid)}/addTask`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Move or Insert sections
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The section's move action 
    # + return - Successfully moved the specified section 
    resource isolated function post projects/[string project_gid]/sections/insert(SectionsInsertBody payload, map<string|string[]> headers = {}, *InsertSectionForProjectQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}/sections/insert`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a status update
    #
    # + status_update_gid - The status update to get
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the specified object's status updates 
    resource isolated function get status_updates/[string status_update_gid](map<string|string[]> headers = {}, *GetStatusQueries queries) returns InlineResponse20032|error {
        string resourcePath = string `/status_updates/${getEncodedUri(status_update_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete a status update
    #
    # + status_update_gid - The status update to get
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully deleted the specified status 
    resource isolated function delete status_updates/[string status_update_gid](map<string|string[]> headers = {}, *DeleteStatusQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/status_updates/${getEncodedUri(status_update_gid)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get status updates from an object
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the specified object's status updates 
    resource isolated function get status_updates(map<string|string[]> headers = {}, *GetStatusesForObjectQueries queries) returns InlineResponse20033|error {
        string resourcePath = string `/status_updates`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a status update
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The status update to create 
    # + return - Successfully created a new status update 
    resource isolated function post status_updates(StatusUpdatesBody payload, map<string|string[]> headers = {}, *CreateStatusForObjectQueries queries) returns InlineResponse20032|error {
        string resourcePath = string `/status_updates`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a story
    #
    # + story_gid - Globally unique identifier for the story
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the specified story 
    resource isolated function get stories/[string story_gid](map<string|string[]> headers = {}, *GetStoryQueries queries) returns InlineResponse20034|error {
        string resourcePath = string `/stories/${getEncodedUri(story_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update a story
    #
    # + story_gid - Globally unique identifier for the story
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The comment story to update 
    # + return - Successfully retrieved the specified story 
    resource isolated function put stories/[string story_gid](StoriesstoryGidBody payload, map<string|string[]> headers = {}, *UpdateStoryQueries queries) returns InlineResponse20034|error {
        string resourcePath = string `/stories/${getEncodedUri(story_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete a story
    #
    # + story_gid - Globally unique identifier for the story
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully deleted the specified story 
    resource isolated function delete stories/[string story_gid](map<string|string[]> headers = {}, *DeleteStoryQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/stories/${getEncodedUri(story_gid)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get stories from a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the specified task's stories 
    resource isolated function get tasks/[string task_gid]/stories(map<string|string[]> headers = {}, *GetStoriesForTaskQueries queries) returns InlineResponse20035|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/stories`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a story on a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The story to create 
    # + return - Successfully created a new story 
    resource isolated function post tasks/[string task_gid]/stories(TaskGidStoriesBody payload, map<string|string[]> headers = {}, *CreateStoryForTaskQueries queries) returns InlineResponse20034|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/stories`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get multiple tags
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the specified set of tags 
    resource isolated function get tags(map<string|string[]> headers = {}, *GetTagsQueries queries) returns InlineResponse20036|error {
        string resourcePath = string `/tags`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a tag
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The tag to create 
    # + return - Successfully created the newly specified tag 
    resource isolated function post tags(TagsBody payload, map<string|string[]> headers = {}, *CreateTagQueries queries) returns InlineResponse2016|error {
        string resourcePath = string `/tags`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a tag
    #
    # + tag_gid - Globally unique identifier for the tag
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the specified tag 
    resource isolated function get tags/[string tag_gid](map<string|string[]> headers = {}, *GetTagQueries queries) returns InlineResponse2016|error {
        string resourcePath = string `/tags/${getEncodedUri(tag_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update a tag
    #
    # + tag_gid - Globally unique identifier for the tag
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully updated the specified tag 
    resource isolated function put tags/[string tag_gid](map<string|string[]> headers = {}, *UpdateTagQueries queries) returns InlineResponse2016|error {
        string resourcePath = string `/tags/${getEncodedUri(tag_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete a tag
    #
    # + tag_gid - Globally unique identifier for the tag
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully deleted the specified tag 
    resource isolated function delete tags/[string tag_gid](map<string|string[]> headers = {}, *DeleteTagQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/tags/${getEncodedUri(tag_gid)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get a task's tags
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the tags for the given task 
    resource isolated function get tasks/[string task_gid]/tags(map<string|string[]> headers = {}, *GetTagsForTaskQueries queries) returns InlineResponse20036|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/tags`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get tags in a workspace
    #
    # + workspace_gid - Globally unique identifier for the workspace or organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the specified set of tags 
    resource isolated function get workspaces/[string workspace_gid]/tags(map<string|string[]> headers = {}, *GetTagsForWorkspaceQueries queries) returns InlineResponse20036|error {
        string resourcePath = string `/workspaces/${getEncodedUri(workspace_gid)}/tags`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a tag in a workspace
    #
    # + workspace_gid - Globally unique identifier for the workspace or organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The tag to create 
    # + return - Successfully created the newly specified tag 
    resource isolated function post workspaces/[string workspace_gid]/tags(WorkspaceGidTagsBody payload, map<string|string[]> headers = {}, *CreateTagForWorkspaceQueries queries) returns InlineResponse2016|error {
        string resourcePath = string `/workspaces/${getEncodedUri(workspace_gid)}/tags`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get multiple task templates
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved requested task templates 
    resource isolated function get task_templates(map<string|string[]> headers = {}, *GetTaskTemplatesQueries queries) returns InlineResponse20037|error {
        string resourcePath = string `/task_templates`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a task template
    #
    # + task_template_gid - Globally unique identifier for the task template
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved requested task template 
    resource isolated function get task_templates/[string task_template_gid](map<string|string[]> headers = {}, *GetTaskTemplateQueries queries) returns InlineResponse20038|error {
        string resourcePath = string `/task_templates/${getEncodedUri(task_template_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete a task template
    #
    # + task_template_gid - Globally unique identifier for the task template
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully deleted the specified task template 
    resource isolated function delete task_templates/[string task_template_gid](map<string|string[]> headers = {}, *DeleteTaskTemplateQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/task_templates/${getEncodedUri(task_template_gid)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Instantiate a task from a task template
    #
    # + task_template_gid - Globally unique identifier for the task template
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Describes the inputs used for instantiating a task - the task's name 
    # + return - Successfully created the job to handle task instantiation 
    resource isolated function post task_templates/[string task_template_gid]/instantiateTask(TaskTemplateGidInstantiateTaskBody payload, map<string|string[]> headers = {}, *InstantiateTaskQueries queries) returns InlineResponse20013|error {
        string resourcePath = string `/task_templates/${getEncodedUri(task_template_gid)}/instantiateTask`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get multiple tasks
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved requested tasks 
    resource isolated function get tasks(map<string|string[]> headers = {}, *GetTasksQueries queries) returns InlineResponse20039|error {
        string resourcePath = string `/tasks`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a task
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The task to create 
    # + return - Successfully created a new task 
    resource isolated function post tasks(TasksBody payload, map<string|string[]> headers = {}, *CreateTaskQueries queries) returns InlineResponse2017|error {
        string resourcePath = string `/tasks`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the specified task 
    resource isolated function get tasks/[string task_gid](map<string|string[]> headers = {}, *GetTaskQueries queries) returns InlineResponse2017|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The task to update 
    # + return - Successfully updated the specified task 
    resource isolated function put tasks/[string task_gid](TaskstaskGidBody payload, map<string|string[]> headers = {}, *UpdateTaskQueries queries) returns InlineResponse2017|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully deleted the specified task 
    resource isolated function delete tasks/[string task_gid](map<string|string[]> headers = {}, *DeleteTaskQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Duplicate a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Describes the duplicate's name and the fields that will be duplicated 
    # + return - Successfully created the job to handle duplication 
    resource isolated function post tasks/[string task_gid]/duplicate(TaskGidDuplicateBody payload, map<string|string[]> headers = {}, *DuplicateTaskQueries queries) returns InlineResponse20013|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/duplicate`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get tasks from a project
    #
    # + project_gid - Globally unique identifier for the project
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested project's tasks 
    resource isolated function get projects/[string project_gid]/tasks(map<string|string[]> headers = {}, *GetTasksForProjectQueries queries) returns InlineResponse20039|error {
        string resourcePath = string `/projects/${getEncodedUri(project_gid)}/tasks`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get tasks from a section
    #
    # + section_gid - The globally unique identifier for the section
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the section's tasks 
    resource isolated function get sections/[string section_gid]/tasks(map<string|string[]> headers = {}, *GetTasksForSectionQueries queries) returns InlineResponse20039|error {
        string resourcePath = string `/sections/${getEncodedUri(section_gid)}/tasks`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get tasks from a tag
    #
    # + tag_gid - Globally unique identifier for the tag
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the tasks associated with the specified tag 
    resource isolated function get tags/[string tag_gid]/tasks(map<string|string[]> headers = {}, *GetTasksForTagQueries queries) returns InlineResponse20039|error {
        string resourcePath = string `/tags/${getEncodedUri(tag_gid)}/tasks`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get tasks from a user task list
    #
    # + user_task_list_gid - Globally unique identifier for the user task list
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the user task list's tasks 
    resource isolated function get user_task_lists/[string user_task_list_gid]/tasks(map<string|string[]> headers = {}, *GetTasksForUserTaskListQueries queries) returns InlineResponse20039|error {
        string resourcePath = string `/user_task_lists/${getEncodedUri(user_task_list_gid)}/tasks`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get subtasks from a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the specified task's subtasks 
    resource isolated function get tasks/[string task_gid]/subtasks(map<string|string[]> headers = {}, *GetSubtasksForTaskQueries queries) returns InlineResponse20039|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/subtasks`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a subtask
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The new subtask to create 
    # + return - Successfully created the specified subtask 
    resource isolated function post tasks/[string task_gid]/subtasks(TaskGidSubtasksBody payload, map<string|string[]> headers = {}, *CreateSubtaskForTaskQueries queries) returns InlineResponse2017|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/subtasks`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Set the parent of a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The new parent of the subtask 
    # + return - Successfully changed the parent of the specified subtask 
    resource isolated function post tasks/[string task_gid]/setParent(TaskGidSetParentBody payload, map<string|string[]> headers = {}, *SetParentForTaskQueries queries) returns InlineResponse2017|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/setParent`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get dependencies from a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the specified task's dependencies 
    resource isolated function get tasks/[string task_gid]/dependencies(map<string|string[]> headers = {}, *GetDependenciesForTaskQueries queries) returns InlineResponse20039|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/dependencies`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Set dependencies for a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The list of tasks to set as dependencies 
    # + return - Successfully set the specified dependencies on the task 
    resource isolated function post tasks/[string task_gid]/addDependencies(TaskGidAddDependenciesBody payload, map<string|string[]> headers = {}, *AddDependenciesForTaskQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/addDependencies`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Unlink dependencies from a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The list of tasks to unlink as dependencies 
    # + return - Successfully unlinked the dependencies from the specified task 
    resource isolated function post tasks/[string task_gid]/removeDependencies(TaskGidRemoveDependenciesBody payload, map<string|string[]> headers = {}, *RemoveDependenciesForTaskQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/removeDependencies`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get dependents from a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the specified dependents of the task 
    resource isolated function get tasks/[string task_gid]/dependents(map<string|string[]> headers = {}, *GetDependentsForTaskQueries queries) returns InlineResponse20039|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/dependents`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Set dependents for a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The list of tasks to add as dependents 
    # + return - Successfully set the specified dependents on the given task 
    resource isolated function post tasks/[string task_gid]/addDependents(TaskGidAddDependentsBody payload, map<string|string[]> headers = {}, *AddDependentsForTaskQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/addDependents`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Unlink dependents from a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The list of tasks to remove as dependents 
    # + return - Successfully unlinked the specified tasks as dependents 
    resource isolated function post tasks/[string task_gid]/removeDependents(TaskGidRemoveDependentsBody payload, map<string|string[]> headers = {}, *RemoveDependentsForTaskQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/removeDependents`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add a project to a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The project to add the task to 
    # + return - Successfully added the specified project to the task 
    resource isolated function post tasks/[string task_gid]/addProject(TaskGidAddProjectBody payload, map<string|string[]> headers = {}, *AddProjectForTaskQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/addProject`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove a project from a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The project to remove the task from 
    # + return - Successfully removed the specified project from the task 
    resource isolated function post tasks/[string task_gid]/removeProject(TaskGidRemoveProjectBody payload, map<string|string[]> headers = {}, *RemoveProjectForTaskQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/removeProject`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add a tag to a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The tag to add to the task 
    # + return - Successfully added the specified tag to the task 
    resource isolated function post tasks/[string task_gid]/addTag(TaskGidAddTagBody payload, map<string|string[]> headers = {}, *AddTagForTaskQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/addTag`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove a tag from a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The tag to remove from the task 
    # + return - Successfully removed the specified tag from the task 
    resource isolated function post tasks/[string task_gid]/removeTag(TaskGidRemoveTagBody payload, map<string|string[]> headers = {}, *RemoveTagForTaskQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/removeTag`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add followers to a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The followers to add to the task 
    # + return - Successfully added the specified followers to the task 
    resource isolated function post tasks/[string task_gid]/addFollowers(TaskGidAddFollowersBody payload, map<string|string[]> headers = {}, *AddFollowersForTaskQueries queries) returns InlineResponse2017|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/addFollowers`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove followers from a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The followers to remove from the task 
    # + return - Successfully removed the specified followers from the task 
    resource isolated function post tasks/[string task_gid]/removeFollowers(TaskGidRemoveFollowersBody payload, map<string|string[]> headers = {}, *RemoveFollowerForTaskQueries queries) returns InlineResponse2017|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/removeFollowers`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a task for a given custom ID
    #
    # + workspace_gid - Globally unique identifier for the workspace or organization
    # + custom_id - Generated custom ID for a task
    # + headers - Headers to be sent with the request 
    # + return - Successfully retrieved task for given custom ID 
    resource isolated function get workspaces/[string workspace_gid]/tasks/custom_id/[string custom_id](map<string|string[]> headers = {}) returns InlineResponse2017|error {
        string resourcePath = string `/workspaces/${getEncodedUri(workspace_gid)}/tasks/custom_id/${getEncodedUri(custom_id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Search tasks in a workspace
    #
    # + workspace_gid - Globally unique identifier for the workspace or organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the section's tasks 
    resource isolated function get workspaces/[string workspace_gid]/tasks/search(map<string|string[]> headers = {}, *SearchTasksForWorkspaceQueries queries) returns InlineResponse20040|error {
        string resourcePath = string `/workspaces/${getEncodedUri(workspace_gid)}/tasks/search`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a team membership
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested team membership 
    resource isolated function get team_memberships/[string team_membership_gid](map<string|string[]> headers = {}, *GetTeamMembershipQueries queries) returns InlineResponse20041|error {
        string resourcePath = string `/team_memberships/${getEncodedUri(team_membership_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get team memberships
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested team memberships 
    resource isolated function get team_memberships(map<string|string[]> headers = {}, *GetTeamMembershipsQueries queries) returns InlineResponse20042|error {
        string resourcePath = string `/team_memberships`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get memberships from a team
    #
    # + team_gid - Globally unique identifier for the team
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested team's memberships 
    resource isolated function get teams/[string team_gid]/team_memberships(map<string|string[]> headers = {}, *GetTeamMembershipsForTeamQueries queries) returns InlineResponse20042|error {
        string resourcePath = string `/teams/${getEncodedUri(team_gid)}/team_memberships`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get memberships from a user
    #
    # + user_gid - A string identifying a user. This can either be the string "me", an email, or the gid of a user
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested users's memberships 
    resource isolated function get users/[string user_gid]/team_memberships(map<string|string[]> headers = {}, *GetTeamMembershipsForUserQueries queries) returns InlineResponse20042|error {
        string resourcePath = string `/users/${getEncodedUri(user_gid)}/team_memberships`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a team
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The team to create 
    # + return - Successfully created a new team 
    resource isolated function post teams(TeamsBody payload, map<string|string[]> headers = {}, *CreateTeamQueries queries) returns InlineResponse2018|error {
        string resourcePath = string `/teams`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a team
    #
    # + team_gid - Globally unique identifier for the team
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the record for a single team 
    resource isolated function get teams/[string team_gid](map<string|string[]> headers = {}, *GetTeamQueries queries) returns InlineResponse2018|error {
        string resourcePath = string `/teams/${getEncodedUri(team_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update a team
    #
    # + team_gid - Globally unique identifier for the team
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The team to update 
    # + return - Successfully updated the team 
    resource isolated function put teams/[string team_gid](TeamsteamGidBody payload, map<string|string[]> headers = {}, *UpdateTeamQueries queries) returns InlineResponse2018|error {
        string resourcePath = string `/teams/${getEncodedUri(team_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get teams in a workspace
    #
    # + workspace_gid - Globally unique identifier for the workspace or organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Returns the team records for all teams in the organization or workspace accessible to the authenticated user 
    resource isolated function get workspaces/[string workspace_gid]/teams(map<string|string[]> headers = {}, *GetTeamsForWorkspaceQueries queries) returns InlineResponse20043|error {
        string resourcePath = string `/workspaces/${getEncodedUri(workspace_gid)}/teams`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get teams for a user
    #
    # + user_gid - A string identifying a user. This can either be the string "me", an email, or the gid of a user
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Returns the team records for all teams in the organization or workspace to which the given user is assigned 
    resource isolated function get users/[string user_gid]/teams(map<string|string[]> headers = {}, *GetTeamsForUserQueries queries) returns InlineResponse20043|error {
        string resourcePath = string `/users/${getEncodedUri(user_gid)}/teams`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add a user to a team
    #
    # + team_gid - Globally unique identifier for the team
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The user to add to the team 
    # + return - Successfully added user to the team 
    resource isolated function post teams/[string team_gid]/addUser(TeamGidAddUserBody payload, map<string|string[]> headers = {}, *AddUserForTeamQueries queries) returns InlineResponse20041|error {
        string resourcePath = string `/teams/${getEncodedUri(team_gid)}/addUser`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove a user from a team
    #
    # + team_gid - Globally unique identifier for the team
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The user to remove from the team 
    # + return - Returns an empty data record 
    resource isolated function post teams/[string team_gid]/removeUser(TeamGidRemoveUserBody payload, map<string|string[]> headers = {}, *RemoveUserForTeamQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/teams/${getEncodedUri(team_gid)}/removeUser`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a time period
    #
    # + time_period_gid - Globally unique identifier for the time period
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the record for a single time period 
    resource isolated function get time_periods/[string time_period_gid](map<string|string[]> headers = {}, *GetTimePeriodQueries queries) returns InlineResponse20044|error {
        string resourcePath = string `/time_periods/${getEncodedUri(time_period_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get time periods
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested time periods 
    resource isolated function get time_periods(map<string|string[]> headers = {}, *GetTimePeriodsQueries queries) returns InlineResponse20045|error {
        string resourcePath = string `/time_periods`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get time tracking entries for a task
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested time tracking entries 
    resource isolated function get tasks/[string task_gid]/time_tracking_entries(map<string|string[]> headers = {}, *GetTimeTrackingEntriesForTaskQueries queries) returns InlineResponse20046|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/time_tracking_entries`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create a time tracking entry
    #
    # + task_gid - The task to operate on
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Information about the time tracking entry 
    # + return - Successfully created a time tracking entry for the task 
    resource isolated function post tasks/[string task_gid]/time_tracking_entries(TaskGidTimeTrackingEntriesBody payload, map<string|string[]> headers = {}, *CreateTimeTrackingEntryQueries queries) returns InlineResponse2019|error {
        string resourcePath = string `/tasks/${getEncodedUri(task_gid)}/time_tracking_entries`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a time tracking entry
    #
    # + time_tracking_entry_gid - Globally unique identifier for the time tracking entry
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested time tracking entry 
    resource isolated function get time_tracking_entries/[string time_tracking_entry_gid](map<string|string[]> headers = {}, *GetTimeTrackingEntryQueries queries) returns InlineResponse2019|error {
        string resourcePath = string `/time_tracking_entries/${getEncodedUri(time_tracking_entry_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update a time tracking entry
    #
    # + time_tracking_entry_gid - Globally unique identifier for the time tracking entry
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The updated fields for the time tracking entry 
    # + return - Successfully updated the time tracking entry 
    resource isolated function put time_tracking_entries/[string time_tracking_entry_gid](TimeTrackingEntriestimeTrackingEntryGidBody payload, map<string|string[]> headers = {}, *UpdateTimeTrackingEntryQueries queries) returns InlineResponse2019|error {
        string resourcePath = string `/time_tracking_entries/${getEncodedUri(time_tracking_entry_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete a time tracking entry
    #
    # + time_tracking_entry_gid - Globally unique identifier for the time tracking entry
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully deleted the specified time tracking entry 
    resource isolated function delete time_tracking_entries/[string time_tracking_entry_gid](map<string|string[]> headers = {}, *DeleteTimeTrackingEntryQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/time_tracking_entries/${getEncodedUri(time_tracking_entry_gid)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get objects via typeahead
    #
    # + workspace_gid - Globally unique identifier for the workspace or organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved objects via a typeahead search algorithm 
    resource isolated function get workspaces/[string workspace_gid]/typeahead(map<string|string[]> headers = {}, *TypeaheadForWorkspaceQueries queries) returns InlineResponse20047|error {
        string resourcePath = string `/workspaces/${getEncodedUri(workspace_gid)}/typeahead`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a user task list
    #
    # + user_task_list_gid - Globally unique identifier for the user task list
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the user task list 
    resource isolated function get user_task_lists/[string user_task_list_gid](map<string|string[]> headers = {}, *GetUserTaskListQueries queries) returns InlineResponse20048|error {
        string resourcePath = string `/user_task_lists/${getEncodedUri(user_task_list_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a user's task list
    #
    # + user_gid - A string identifying a user. This can either be the string "me", an email, or the gid of a user
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the user's task list 
    resource isolated function get users/[string user_gid]/user_task_list(map<string|string[]> headers = {}, *GetUserTaskListForUserQueries queries) returns InlineResponse20048|error {
        string resourcePath = string `/users/${getEncodedUri(user_gid)}/user_task_list`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get multiple users
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested user records 
    resource isolated function get users(map<string|string[]> headers = {}, *GetUsersQueries queries) returns InlineResponse20049|error {
        string resourcePath = string `/users`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a user
    #
    # + user_gid - A string identifying a user. This can either be the string "me", an email, or the gid of a user
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Returns the user specified 
    resource isolated function get users/[string user_gid](map<string|string[]> headers = {}, *GetUserQueries queries) returns InlineResponse20050|error {
        string resourcePath = string `/users/${getEncodedUri(user_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a user's favorites
    #
    # + user_gid - A string identifying a user. This can either be the string "me", an email, or the gid of a user
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Returns the specified user's favorites 
    resource isolated function get users/[string user_gid]/favorites(map<string|string[]> headers = {}, *GetFavoritesForUserQueries queries) returns InlineResponse20051|error {
        string resourcePath = string `/users/${getEncodedUri(user_gid)}/favorites`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get users in a team
    #
    # + team_gid - Globally unique identifier for the team
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Returns the user records for all the members of the team, including guests and limited access users 
    resource isolated function get teams/[string team_gid]/users(map<string|string[]> headers = {}, *GetUsersForTeamQueries queries) returns InlineResponse20052|error {
        string resourcePath = string `/teams/${getEncodedUri(team_gid)}/users`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get users in a workspace or organization
    #
    # + workspace_gid - Globally unique identifier for the workspace or organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Return the users in the specified workspace or org 
    resource isolated function get workspaces/[string workspace_gid]/users(map<string|string[]> headers = {}, *GetUsersForWorkspaceQueries queries) returns InlineResponse20052|error {
        string resourcePath = string `/workspaces/${getEncodedUri(workspace_gid)}/users`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get multiple webhooks
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested webhooks 
    resource isolated function get webhooks(map<string|string[]> headers = {}, *GetWebhooksQueries queries) returns InlineResponse20053|error {
        string resourcePath = string `/webhooks`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Establish a webhook
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The webhook workspace and target 
    # + return - Successfully created the requested webhook 
    resource isolated function post webhooks(WebhooksBody payload, map<string|string[]> headers = {}, *CreateWebhookQueries queries) returns InlineResponse20110|error {
        string resourcePath = string `/webhooks`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get a webhook
    #
    # + webhook_gid - Globally unique identifier for the webhook
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested webhook 
    resource isolated function get webhooks/[string webhook_gid](map<string|string[]> headers = {}, *GetWebhookQueries queries) returns InlineResponse20110|error {
        string resourcePath = string `/webhooks/${getEncodedUri(webhook_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update a webhook
    #
    # + webhook_gid - Globally unique identifier for the webhook
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The updated filters for the webhook 
    # + return - Successfully updated the webhook 
    resource isolated function put webhooks/[string webhook_gid](WebhookswebhookGidBody payload, map<string|string[]> headers = {}, *UpdateWebhookQueries queries) returns InlineResponse20110|error {
        string resourcePath = string `/webhooks/${getEncodedUri(webhook_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete a webhook
    #
    # + webhook_gid - Globally unique identifier for the webhook
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested webhook 
    resource isolated function delete webhooks/[string webhook_gid](map<string|string[]> headers = {}, *DeleteWebhookQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/webhooks/${getEncodedUri(webhook_gid)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get a workspace membership
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested workspace membership 
    resource isolated function get workspace_memberships/[string workspace_membership_gid](map<string|string[]> headers = {}, *GetWorkspaceMembershipQueries queries) returns InlineResponse20054|error {
        string resourcePath = string `/workspace_memberships/${getEncodedUri(workspace_membership_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get workspace memberships for a user
    #
    # + user_gid - A string identifying a user. This can either be the string "me", an email, or the gid of a user
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested user's workspace memberships 
    resource isolated function get users/[string user_gid]/workspace_memberships(map<string|string[]> headers = {}, *GetWorkspaceMembershipsForUserQueries queries) returns InlineResponse20055|error {
        string resourcePath = string `/users/${getEncodedUri(user_gid)}/workspace_memberships`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get the workspace memberships for a workspace
    #
    # + workspace_gid - Globally unique identifier for the workspace or organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successfully retrieved the requested workspace's memberships 
    resource isolated function get workspaces/[string workspace_gid]/workspace_memberships(map<string|string[]> headers = {}, *GetWorkspaceMembershipsForWorkspaceQueries queries) returns InlineResponse20055|error {
        string resourcePath = string `/workspaces/${getEncodedUri(workspace_gid)}/workspace_memberships`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get multiple workspaces
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Return all workspaces visible to the authorized user 
    resource isolated function get workspaces(map<string|string[]> headers = {}, *GetWorkspacesQueries queries) returns InlineResponse20056|error {
        string resourcePath = string `/workspaces`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get a workspace
    #
    # + workspace_gid - Globally unique identifier for the workspace or organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Return the full workspace record 
    resource isolated function get workspaces/[string workspace_gid](map<string|string[]> headers = {}, *GetWorkspaceQueries queries) returns InlineResponse20057|error {
        string resourcePath = string `/workspaces/${getEncodedUri(workspace_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update a workspace
    #
    # + workspace_gid - Globally unique identifier for the workspace or organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The workspace object with all updated properties 
    # + return - Update for the workspace was successful 
    resource isolated function put workspaces/[string workspace_gid](WorkspacesworkspaceGidBody payload, map<string|string[]> headers = {}, *UpdateWorkspaceQueries queries) returns InlineResponse20057|error {
        string resourcePath = string `/workspaces/${getEncodedUri(workspace_gid)}`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Add a user to a workspace or organization
    #
    # + workspace_gid - Globally unique identifier for the workspace or organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The user to add to the workspace 
    # + return - The user was added successfully to the workspace or organization 
    resource isolated function post workspaces/[string workspace_gid]/addUser(WorkspaceGidAddUserBody payload, map<string|string[]> headers = {}, *AddUserForWorkspaceQueries queries) returns InlineResponse20058|error {
        string resourcePath = string `/workspaces/${getEncodedUri(workspace_gid)}/addUser`;
        map<Encoding> queryParamEncoding = {"opt_fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove a user from a workspace or organization
    #
    # + workspace_gid - Globally unique identifier for the workspace or organization
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The user to remove from the workspace 
    # + return - The user was removed successfully to the workspace or organization 
    resource isolated function post workspaces/[string workspace_gid]/removeUser(WorkspaceGidRemoveUserBody payload, map<string|string[]> headers = {}, *RemoveUserForWorkspaceQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/workspaces/${getEncodedUri(workspace_gid)}/removeUser`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }
}
